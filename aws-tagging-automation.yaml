AWSTemplateFormatVersion: "2010-09-09"
Description: AWS auto tagging for MAP Programe for service EC2, EKS, RDS, VPC, ElastiCache, DMS, S3, DynamoDB, Lambda, EFS, EBS, ELB, OpenSearch, SNS, SQS, KMS

Parameters:
  AutomationTags:
    Type: String
    Default: ''
    Description: 'For Example: {"tag1": "test1","tag2": "test2"}'

  LambdaAutoTaggingFunctionName:
    Type: String
    Description: Name of the lambda-Ayto-Tagging-Function-Name
    Default: aws-tagging-automation-function

  EventBridgeRuleName:
    Type: String
    Description: Name of the EventBridge Rules
    Default: aws-tagging-automation-rules

  IAMAutoTaggingRoleName:
    Type: String
    Description: IAM role name for lambda
    Default: aws-tagging-automation-role

  IAMAutoTaggingPolicyName:
    Type: String
    Description: IAM customed managed policy
    Default: aws-tagging-automation-policy

Resources:
  # Lambda functions resources
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Ref IAMAutoTaggingPolicyName
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  # Rules for DynamoDB
                  - 'dynamodb:TagResource'
                  - 'dynamodb:DescribeTable'

                  # Rules for lambdas
                  - 'lambda:TagResource'
                  - 'lambda:ListTags'

                  # Rules for S3
                  - 's3:GetBucketTagging'
                  - 's3:PutBucketTagging'

                  # Rules for EC2
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeNatGateways'
                  - 'ec2:DescribeInternetGateways'
                  - 'ec2:DescribeVolumes'

                  # Rules for RDS
                  - 'rds:AddTagsToResource'
                  - 'rds:DescribeDBInstances'

                  # Rules for sns
                  - 'sns:TagResource'

                  # Rules for sqs
                  - 'sqs:ListQueueTags'
                  - 'sqs:TagQueue'

                  # Rules for opensearch
                  - 'es:AddTags'

                  # Rules for kms
                  - 'kms:ListResourceTags'
                  - 'kms:TagResource'

                  # Rules for EFS
                  - 'elasticfilesystem:TagResource'
                  - 'elasticfilesystem:CreateTags'
                  - 'elasticfilesystem:DescribeTags'

                  # Rule for EKS
                  - 'eks:TagResource'
                  - 'eks:DescribeCluster'
                  - 'eks:DescribeNodegroup'

                  # Rule for DMS
                  - 'dms:DescribeReplicationInstances'
                  - 'dms:AddTagsToResource'

                  # Rule for ElastiCache
                  - 'elasticache:AddTagsToResource'
                  - 'elasticache:DescribeCacheClusters'
                  - 'elasticache:DescribeReplicationGroups'

                  # Rules for ELB
                  - 'elasticloadbalancing:AddTags'

                  # Rules for CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'

                  # Rules for Resource Group Tag Editor
                  - 'tag:getResources'
                  - 'tag:getTagKeys'
                  - 'tag:getTagValues'
                  - 'tag:TagResources'
                  - 'tag:UntagResources'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:ListStackResources'
                  - 'resource-groups:*'
                Resource: '*'

  LambdaAutoTagging:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn 
      Code:
        ZipFile: |
              import boto3
              import os
              import json

              def aws_ec2(event):
                  arnList = []
                  _account = event['account']
                  _region = event['region']
                  ec2ArnTemplate = 'arn:aws:ec2:@region@:@account@:instance/@instanceId@'
                  volumeArnTemplate = 'arn:aws:ec2:@region@:@account@:volume/@volumeId@'
                  resourceArnTemplate = 'arn:aws:ec2:@region@:@account@:resourceName/@resourceId@'
                  
                  if event['detail']['eventName'] == 'RunInstances':
                      print("tagging for new EC2...")
                      _instanceId = event['detail']['responseElements']['instancesSet']['items'][0]['instanceId']
                      arnList.append(ec2ArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@instanceId@', _instanceId))

                      ec2_resource = boto3.resource('ec2')
                      _instance = ec2_resource.Instance(_instanceId)
                      for volume in _instance.volumes.all():
                          arnList.append(volumeArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@volumeId@', volume.id))

                  elif event['detail']['eventName'] == 'CreateVolume':
                      print("tagging for new EBS...")
                      _volumeId = event['detail']['responseElements']['volumeId']
                      arnList.append(volumeArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@volumeId@', _volumeId))

                  elif event['detail']['eventName'] == 'CreateVpc':
                      print("tagging for new VPC...")
                      _vpcId = event['detail']['responseElements']['vpc']['vpcId']
                      arnList.append(resourceArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('resourceName', 'vpc').replace('@resourceId@', _vpcId))
                      
                  elif event['detail']['eventName'] == 'CreateInternetGateway':
                      print("tagging for new IGW...")
                      _igwId = event['detail']['responseElements']['internetGateway']['internetGatewayId']
                      arnList.append(resourceArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('resourceName', 'internet-gateway').replace('@resourceId@', _igwId))
                      
                  elif event['detail']['eventName'] == 'CreateNatGateway':
                      print("tagging for new Nat Gateway...")
                      _natgwId = event['detail']['responseElements']['natGatewayId']
                      arnList.append(resourceArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('resourceName', 'natgateway').replace('@resourceId@', _natgwId))
                      
                  elif event['detail']['eventName'] == 'AllocateAddress':
                      print("tagging for new EIP...")
                      arnList.append(event['detail']['responseElements']['allocationId'])
                      
                  elif event['detail']['eventName'] == 'CreateVpcEndpoint':
                      print("tagging for new VPC Endpoint...")
                      _vpceId = event['detail']['responseElements']['CreateVpcEndpointResponse']['vpcEndpoint']['vpcEndpointId']
                      arnList.append(resourceArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('resourceName', 'vpc-endpoint').replace('@resourceId@', _vpceId))        
                      
                  elif event['detail']['eventName'] == 'CreateTransitGateway':
                      print("tagging for new Transit Gateway...")
                      arnList.append(event['detail']['responseElements']['CreateTransitGatewayResponse']['transitGateway']['transitGatewayArn'])
                  return arnList
                  
              def aws_elasticloadbalancing(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateLoadBalancer':
                      print("tagging for new LoadBalancer...")
                      lbs = event['detail']['responseElements']
                      for lb in lbs['loadBalancers']:
                          arnList.append(lb['loadBalancerArn'])
                      return arnList

              def aws_rds(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateDBInstance':
                      print("tagging for new RDS...")
                      arnList.append(event['detail']['responseElements']['dBInstanceArn'])
                      return arnList

              def aws_dms(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateReplicationInstance':
                      print("tagging for new DMS Instance...")
                      arnList.append(event['detail']['responseElements']['replicationInstance']['replicationInstanceArn'])
                      return arnList

              def aws_elasticache(event):
                  arnList = []
                  _account = event['account']
                  _region = event['region']

                  cacheArnTemplate = 'arn:aws:elasticache:@region@:@account@:resourceName:@resourceId@'

                  if event['detail']['eventName'] == 'CreateReplicationGroup':
                      print("tagging for new ElastiCache Cluster...")
                      _replicationGroupId = event['detail']['responseElements']['replicationGroupId']
                      arnList.append(cacheArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('resourceName', 'replicationgroup').replace('@resourceId@', _replicationGroupId)) 
                      return arnList
                      
              def aws_eks(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateCluster':
                      print("tagging for new EKS Cluster...") 
                      arnList.append(event['detail']['responseElements']['cluster']['arn'])
                      return arnList

              def aws_s3(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateBucket':
                      print("tagging for new S3...")
                      _bkcuetName = event['detail']['requestParameters']['bucketName']
                      arnList.append('arn:aws:s3:::' + _bkcuetName)
                      return arnList
                      
              def aws_lambda(event):
                  arnList = []
                  _exist1 = event['detail']['responseElements']
                  _exist2 = event['detail']['eventName'] == 'CreateFunction20150331'
                  if  _exist1!= None and _exist2:
                      function_name = event['detail']['responseElements']['functionName']
                      print('Functin name is :', function_name)
                      arnList.append(event['detail']['responseElements']['functionArn'])
                      return arnList

              def aws_dynamodb(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateTable':
                      table_name = event['detail']['responseElements']['tableDescription']['tableName']
                      waiter = boto3.client('dynamodb').get_waiter('table_exists')
                      waiter.wait(
                          TableName=table_name,
                          WaiterConfig={
                              'Delay': 123,
                              'MaxAttempts': 123
                          }
                      )
                      arnList.append(event['detail']['responseElements']['tableDescription']['tableArn'])
                      return arnList
                      
              def aws_kms(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateKey':
                      arnList.append(event['detail']['responseElements']['keyMetadata']['arn'])
                      return arnList
                      
              def aws_sns(event):
                  arnList = []
                  _account = event['account']
                  _region = event['region']
                  snsArnTemplate = 'arn:aws:sns:@region@:@account@:@topicName@'
                  if event['detail']['eventName'] == 'CreateTopic':
                      print("tagging for new SNS...")
                      _topicName = event['detail']['requestParameters']['name']
                      arnList.append(snsArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@topicName@', _topicName))
                      return arnList
                      
              def aws_sqs(event):
                  arnList = []
                  _account = event['account']
                  _region = event['region']
                  sqsArnTemplate = 'arn:aws:sqs:@region@:@account@:@queueName@'
                  if event['detail']['eventName'] == 'CreateQueue':
                      print("tagging for new SQS...")
                      _queueName = event['detail']['requestParameters']['queueName']
                      arnList.append(sqsArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@queueName@', _queueName))
                      return arnList
                      
              def aws_elasticfilesystem(event):
                  arnList = []
                  _account = event['account']
                  _region = event['region']
                  efsArnTemplate = 'arn:aws:elasticfilesystem:@region@:@account@:file-system/@fileSystemId@'
                  if event['detail']['eventName'] == 'CreateMountTarget':
                      print("tagging for new efs...")
                      _efsId = event['detail']['responseElements']['fileSystemId']
                      arnList.append(efsArnTemplate.replace('@region@', _region).replace('@account@', _account).replace('@fileSystemId@', _efsId))
                      return arnList
                      
              def aws_es(event):
                  arnList = []
                  if event['detail']['eventName'] == 'CreateDomain':
                      print("tagging for new open search...")
                      arnList.append(event['detail']['responseElements']['domainStatus']['aRN'])
                      return arnList

              def main(event, context):
                  print("input event is: ")
                  print(event)
                  print("new source is " + event['source'])
                  _method = event['source'].replace('.', "_")
                  print(_method)
                  
                  resARNs = globals()[_method](event)
                  print("resource arn is: ")
                  print(resARNs)

                  _res_tags =  json.loads(os.environ['tags'])
                  boto3.client('resourcegroupstaggingapi').tag_resources(
                      ResourceARNList=resARNs,
                      Tags=_res_tags
                  )

                  return {
                      'statusCode': 200,
                      'body': json.dumps('Finished map tagging with ' + event['source'])
                  }

                  
      FunctionName: !Ref LambdaAutoTaggingFunctionName
      Handler: index.main
      Runtime: python3.8
      Timeout: 300
      Environment:
        Variables:
          tags: !Ref AutomationTags
      
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rules to filtering events
      Name: !Ref EventBridgeRuleName
      EventPattern: '{
                      "detail": {
                        "eventSource": ["ec2.amazonaws.com", "elasticloadbalancing.amazonaws.com", "s3.amazonaws.com", "rds.amazonaws.com", "lambda.amazonaws.com", "dynamodb.amazonaws.com", "elasticfilesystem.amazonaws.com", "es.amazonaws.com", "sqs.amazonaws.com", "sns.amazonaws.com", "kms.amazonaws.com", "dms.amazonaws.com", "elasticache.amazonaws.com", "eks.amazonaws.com"],
                        "eventName": ["RunInstances", "CreateFunction20150331", "CreateBucket", "CreateDBInstance", "CreateTable", "CreateVolume", "CreateLoadBalancer", "CreateMountTarget", "CreateDomain", "CreateQueue", "CreateTopic", "CreateKey", "CreateVpc", "CreateInternetGateway", "CreateNatGateway", "AllocateAddress", "CreateVpcEndpoint", "CreateTransitGateway", "CreateReplicationInstance", "CreateReplicationGroup", "CreateCluster"]
                      },
                      "source": ["aws.ec2", "aws.elasticloadbalancing", "aws.rds", "aws.lambda", "aws.s3", "aws.dynamodb", "aws.elasticfilesystem", "aws.es", "aws.sqs", "aws.sns", "aws.kms", "aws.dms", "aws.elasticache", "aws.eks"]
                    }'
      Targets: 
        - Arn: !GetAtt LambdaAutoTagging.Arn 
          Id: !Ref LambdaAutoTaggingFunctionName

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaAutoTaggingFunctionName"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridgeRule.Arn 
